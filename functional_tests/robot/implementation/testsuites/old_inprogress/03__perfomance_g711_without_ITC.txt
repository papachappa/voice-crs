*** Settings ***
Resource        ${COMMON_SETTINGS_FILE}

Suite Setup         Run Keywords       Restoring MVSIP G711 Config    Stop Sending MVSIP RTP    Restoring CRS-MKD-MCU-Meta-BE G711 Configs  Setup Path   Restart Module
#Suite Teardown      Sleep       3

*** Variables ***

${TrafficLevel}                         1    # При вычислении количества вызовов умножаем на 2 если запускаем 2 копии MVSIP. (20*10000)*2 - кол-во одновр вызовов
${IterationsLimit}                      100
${RTP_time}                             10000

*** Test Cases ***


Check Host and Port In MV-SIP configs
      [Documentation]                    Проверяем правильность конфигов MV-SIP параметры Hosts and Ports
      Sleep                              5


Make changes In MV-SIP configs
      [Documentation]                    Настраиваем конфиги MV-SIP

      @{int_1} =                         CRS.Get Integer       ${MVSIP0_cfg_file}     TrafficLevel =    IterationsLimit =    RTP_time =
      @{int_2} =                         CRS.Get Integer       ${MVSIP1_cfg_file}     TrafficLevel =    IterationsLimit =    RTP_time =
#      @{int_3} =                         SBC.Get Integer       ${MVSIP2_cfg_file}     TrafficLevel =    IterationsLimit =    RTP_time =
#      @{int_4} =                         SBC.Get Integer       ${MVSIP3_cfg_file}     TrafficLevel =    IterationsLimit =    RTP_time =

      CRS.Replace String                 ${MVSIP0_cfg_file}         TrafficLevel = @{int_1}[0]        TrafficLevel = ${TrafficLevel}
      CRS.Replace String                 ${MVSIP0_cfg_file}         IterationsLimit = @{int_1}[1]     IterationsLimit = ${IterationsLimit}
      CRS.Replace String                 ${MVSIP0_cfg_file}         RTP_time = @{int_1}[2]            RTP_time = ${RTP_time}
      Sleep                              1

      CRS.Replace String                 ${MVSIP1_cfg_file}    TrafficLevel = @{int_2}[0]        TrafficLevel = ${TrafficLevel}
      CRS.Replace String                 ${MVSIP1_cfg_file}    IterationsLimit = @{int_2}[1]     IterationsLimit = ${IterationsLimit}
      CRS.Replace String                 ${MVSIP1_cfg_file}    RTP_time = @{int_2}[2]            RTP_time = ${RTP_time}
      Sleep                              1

#      CRS.Replace String                 ${MVSIP2_cfg_file}    TrafficLevel = @{int_3}[0]        TrafficLevel = ${TrafficLevel}
#      CRS.Replace String                 ${MVSIP2_cfg_file}    IterationsLimit = @{int_3}[1]     IterationsLimit = ${IterationsLimit}
#      CRS.Replace String                 ${MVSIP2_cfg_file}    RTP_time = @{int_3}[2]            RTP_time = ${RTP_time}
#      Sleep                              1
#
#      CRS.Replace String                 ${MVSIP3_cfg_file}    TrafficLevel = @{int_4}[0]        TrafficLevel = ${TrafficLevel}
#      CRS.Replace String                 ${MVSIP3_cfg_file}    IterationsLimit = @{int_4}[1]     IterationsLimit = ${IterationsLimit}
#      CRS.Replace String                 ${MVSIP3_cfg_file}    RTP_time = @{int_4}[2]            RTP_time = ${RTP_time}
#      Sleep                              1


Check Loadable Parameters In MV-SIP configs
      [Documentation]                    Проверяем правильность конфигов MV-SIP нагрузочные параметры
      Sleep                              1

Define folder for logs
       [Documentation]                   Создаем папку для логов
       SippA.Run Scenario                ${SCENARIO_PATH}/perfomance_g711_without_ITC

Start Sending MV-SIP
     [Documentation]                     Запускаем MV-SIP
     Sleep                               2
     Manipulation.Run Command            cd ${MVSIP_REMOTE_PATH}/1 && ./start    ${remote_lib_host}
     Manipulation.Run Command            cd ${MVSIP_REMOTE_PATH}/0 && ./start    ${remote_lib_host}
     Sleep                               20

#Run Top Command
#     [Documentation]                     Запускаем команду top во время совершения вызовов и во время передачи RTP
#     Sleep                               2
#     Manipulation.Run Command            top -n 1 -b > ${SCENARIO_PATH}/perfomance_CRS/Perfomance_CRS-MCU_without_transcoding/top_layout_during_call_setup   ${remote_lib_host}
#     Sleep                               10
#     Manipulation.Run Command            top -n 1 -b > ${SCENARIO_PATH}/perfomance_CRS/Perfomance_CRS-MCU_without_transcoding/top_layout_after_call_setup    ${remote_lib_host}

Import Logs
     [Documentation]                     Импортируем логи
     SippA.Import CRS Logs               ${CRS_REMOTE_PATH}        ${remote_lib_host}
     SippA.Import CRS Meta Logs          ${CRS_META_REMOTE_PATH}   ${remote_lib_host}
     SippA.Import CRS BE Logs            ${CRS_BE_REMOTE_PATH}     ${remote_lib_host}
     SippA.Import MKD Logs               ${CRS_MKD_REMOTE_PATH}    ${remote_lib_host}
     SippA.Import MCU Logs               ${CRS_MCU_REMOTE_PATH}    ${remote_lib_host}
     SippA.Import MVSIP Logs             ${MVSIP_REMOTE_PATH}      ${remote_lib_host}


Check MV-SIP Log Files
     [Documentation]                     Проверяем MV-SIP логи на наличие несостоявшихся вызовов
     SippA.Check MVSIP Logs

#QWER
#   CRS.Setup CRS Path

Analyzing Files
     [Documentation]                     Проверяем качество записанных файлов
     ${qty}=                             Evaluate     ${IterationsLimit} * 2
     CRS.Analyzing Files G711            ${qty}    27    1 #количество итераций умножаем на 2



#Call Duration
#     [Documentation]                     Подсчитываем среднюю длительность вызовов
#      ${call_duration}                   SippA.Count Call Duration
#      Set Suite Variable                 ${call_duration}
#      LOG TO CONSOLE                     ''
#      LOG TO CONSOLE                     Средняя длительность вызовов ${call_duration} секунд по данным CRS_cdr.log

#Total Amount Of Calls
#     [Documentation]                     Подсчитываем количество одновременных вызовов
#      #${doubled_call_duration}           Evaluate    ${call_duration} + ${call_duration}
#      ${sec}                             Evaluate   ${RTP_time}/1000 + 3
#      ${concurrent_calls}                SippA.Perfomance Concurrent Calls   ${sec}
#      LOG TO CONSOLE                       ''
#      LOG TO CONSOLE                     Общее количество одновременных вызовов за ${call_duration} секунд ${concurrent_calls} (примерное) по данным CRS_cdr.log


#Count Successfull Calls
#     [Documentation]                      Подсчитываем количество BYE успешных вызовов на которых получен 200 OK
#     ${successfull_calls_OP1}             SippA.Count SIP BYE Messages    OP1
#     ${successfull_calls_OP2}             SippA.Count SIP BYE Messages    OP2
#      LOG TO CONSOLE                       ''
#      LOG TO CONSOLE                       Количество успешных вызовов первого оператора ${successfull_calls_OP1}
#      LOG TO CONSOLE                       ''
#      LOG TO CONSOLE                       Количество успешных вызовов второго оператора ${successfull_calls_OP2}



